# Core Events - Immutable for performance

# User Analytics - Mutable for aggregations
type User @entity {
  id: Bytes! # user address
  totalSwaps: BigInt!
  totalVolume: BigInt!
  firstSeen: BigInt!
  lastSeen: BigInt!
  swapCount: BigInt!
  
  # Derived relationships - no large arrays!
  swaps: [Swap!]! @derivedFrom(field: "userEntity")
  swapEvents: [Swap!]! @derivedFrom(field: "userEntity")
  approvals: [Approval!]! @derivedFrom(field: "user")
  transfersFrom: [Transfer!]! @derivedFrom(field: "fromUser")
  transfersTo: [Transfer!]! @derivedFrom(field: "toUser")
}

# Token Metadata - Mutable for updates
type Token @entity {
  id: Bytes! # token address
  symbol: String
  name: String
  decimals: Int
  totalSupply: BigInt
  transferCount: BigInt!
  approvalCount: BigInt!
  
  # Derived relationships
  swapsAsInput: [Swap!]! @derivedFrom(field: "inputTokenInfo")
  swapsAsOutput: [Swap!]! @derivedFrom(field: "outputTokenInfo")
  transfers: [Transfer!]! @derivedFrom(field: "token")
  approvals: [Approval!]! @derivedFrom(field: "token")
}

# Daily Analytics - Mutable for aggregations
type DailyStats @entity {
  id: String! # date string (YYYY-MM-DD)
  date: BigInt!
  totalVolume: BigInt!
  swapCount: BigInt!
  uniqueUsers: BigInt!
  
  # Derived relationships
  swaps: [Swap!]! @derivedFrom(field: "dailyStats")
  swapEvents: [Swap!]! @derivedFrom(field: "dailyStats")
}

# Existing Events with Enhanced Relationships
type BitInvalidatorUpdated @entity(immutable: true) {
  id: Bytes!
  maker: Bytes! # address
  slotIndex: BigInt! # uint256
  slotValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EIP712DomainChanged @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EpochIncreased @entity(immutable: true) {
  id: Bytes!
  maker: Bytes! # address
  series: BigInt! # uint256
  newEpoch: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrderCancelled @entity(immutable: true) {
  id: Bytes!
  orderHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrderFilled @entity(immutable: true) {
  id: Bytes!
  orderHash: Bytes! # bytes32
  remainingAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  
  # Relationships
  token: Token!
  user: User!
}

type OneInchTokenOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  
  # Relationships
  token: Token!
  fromUser: User!
  toUser: User!
}

type NonceIncreased @entity(immutable: true) {
  id: Bytes!
  maker: Bytes! # address
  newNonce: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LimitOrderProtocolOrderFilled @entity(immutable: true) {
  id: Bytes!
  maker: Bytes! # address
  orderHash: Bytes! # bytes32
  remaining: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrderFilledRFQ @entity(immutable: true) {
  id: Bytes!
  orderHash: Bytes! # bytes32
  makingAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Enhanced Swap entity for easier querying - combines input/output transfers
type Swap @entity {
  id: Bytes! # transaction hash + log index
  user: Bytes! # address that initiated the swap
  inputToken: Bytes! # token address being swapped from
  outputToken: Bytes! # token address being swapped to
  inputAmount: BigInt! # amount of input token
  outputAmount: BigInt! # amount of output token
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  
  # Analytics relationships
  userEntity: User! # Relationship to User entity
  inputTokenInfo: Token! # Relationship to Token entity
  outputTokenInfo: Token! # Relationship to Token entity
  dailyStats: DailyStats! # Relationship to DailyStats entity
}
type FeeCollectorApproval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeCollectorOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeCollectorTransfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ExecutorApproval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutorOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutorTransfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type SwapExecutorApproval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SwapExecutorOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SwapExecutorTransfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
